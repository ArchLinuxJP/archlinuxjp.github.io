<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Community on archlinuxjp</title>
    <link>https://archlinuxjp.github.io/tags/community/</link>
    <description>Recent content in Community on archlinuxjp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 13 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://archlinuxjp.github.io/tags/community/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ArchLinuxJPのコミュニティをSlackで作ってみた</title>
      <link>https://archlinuxjp.github.io/2015/12/13/hello-world-archlinuxjp</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://archlinuxjp.github.io/2015/12/13/hello-world-archlinuxjp</guid>
      <description>

&lt;h2 id=&#34;コミュニティに参加する:e5347bebfcb5a4df610388de4c8959a0&#34;&gt;コミュニティに参加する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://archlinuxjp-slack.heroku.com/&#34;&gt;http://archlinuxjp-slack.heroku.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;slack:e5347bebfcb5a4df610388de4c8959a0&#34;&gt;Slack&lt;/h2&gt;

&lt;h3 id=&#34;slackin:e5347bebfcb5a4df610388de4c8959a0&#34;&gt;Slackin&lt;/h3&gt;

&lt;p&gt;コミュニティは、&lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt;上で運用されており、招待は、&lt;a href=&#34;https://github.com/rauchg/slackin&#34;&gt;rauchg/slackin&lt;/a&gt;及び、&lt;a href=&#34;https://dashboard.heroku.com/&#34;&gt;Heroku&lt;/a&gt;によって自動化しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-button&#34;&gt;Heroku Deploy Button&lt;/a&gt;の設置は、&lt;code&gt;app.json&lt;/code&gt;をリポジトリ上に作成することで可能になります。&lt;code&gt;Slackin&lt;/code&gt;はこれを利用して、Herokuに簡単にデプロイできるようにしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i -g app.json

$ app.json init

$ cat app.json
{
  &amp;quot;name&amp;quot;: &amp;quot;Node.js Sample&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A barebones Node.js app using Express 4&amp;quot;,
  &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/heroku/node-js-sample&amp;quot;,
  &amp;quot;logo&amp;quot;: &amp;quot;https://node-js-sample.herokuapp.com/node.png&amp;quot;,
  &amp;quot;keywords&amp;quot;: [&amp;quot;node&amp;quot;, &amp;quot;express&amp;quot;, &amp;quot;static&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wercker:e5347bebfcb5a4df610388de4c8959a0&#34;&gt;Wercker&lt;/h3&gt;

&lt;p&gt;ArchLinuxJPのコミュニティである&lt;a href=&#34;archlinuxjp.slack.com&#34;&gt;archlinuxjp.slack.com&lt;/a&gt;では、&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;にホストしているリポジトリのビルド、デプロイ通知を&lt;a href=&#34;https://github.com/wantedly/step-pretty-slack-notify&#34;&gt;wantedly/step-pretty-slack-notify&lt;/a&gt;を使って行います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;wercker.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;box: wercker/nodejs
build:
    after-steps:
        - wantedly/pretty-slack-notify:
            webhook_url: $SLACK_WEBHOOK_URL
deploy:
    after-steps:
        - wantedly/pretty-slack-notify:
            webhook_url: $SLACK_WEBHOOK_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SLACK_WEBHOOK_URL&lt;/code&gt;には、Werckerで設定する環境変数に&lt;a href=&#34;https://api.slack.com/incoming-webhooks&#34;&gt;Incoming Webhooks&lt;/a&gt;のURLを入れます。&lt;/p&gt;

&lt;p&gt;なお、&lt;code&gt;box: wercker/nodejs&lt;/code&gt;を使用するので、&lt;code&gt;Infrastructure stack&lt;/code&gt;に&lt;code&gt;Docker&lt;/code&gt;は設定しません。&lt;/p&gt;

&lt;h3 id=&#34;hubot:e5347bebfcb5a4df610388de4c8959a0&#34;&gt;Hubot&lt;/h3&gt;

&lt;p&gt;コミュニティには、Herokuで動かしている&lt;a href=&#34;https://hubot.github.com/&#34;&gt;Hubot&lt;/a&gt;もログインしています。&lt;/p&gt;

&lt;p&gt;これは試験的に動かしているものですが、以下の様な流れでコードを自動的にビルドしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GitHub(Push) -&amp;gt; Wercker(Build,Deplpy) -&amp;gt; Heroku(App) -&amp;gt; Slack(Comment)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、Herokuは、Freeで使っており、スリープや時間制限があるため&lt;a href=&#34;https://github.com/hubot-scripts/hubot-heroku-keepalive&#34;&gt;hubot-scripts/hubot-heroku-keepalive&lt;/a&gt;を設定しています。&lt;/p&gt;

&lt;p&gt;一応、&lt;a href=&#34;https://github.com/slackhq/hubot-slack&#34;&gt;slackhq/hubot-slack&lt;/a&gt;を動作させるまでの簡単な手順を書きます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HUBOT_SLACK_TOKEN&lt;/code&gt;には、HubotのSlackで&lt;a href=&#34;https://archlinuxjp.slack.com/services/new&#34;&gt;新しいサービス&lt;/a&gt;を追加して、取得したトークンを入れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i -g hubot hubot-slack yo generator-hubot coffee-script

$ npm i hubot-slack -S

$ mkdir hubot

$ yo hubot

$ ./bin/hubot
&amp;gt; ping
&amp;gt; hubot: PONG

$ heroku login

$ heroku create herokuapp

# add : credit card
$ heroku addons:add redistogo:nano

$ heroku config:set HUBOT_SLACK_TOKEN=xoxb-000000000-XXXXXXXXXXXXX

$ heroku config:set HUBOT_HEROKU_KEEPALIVE_URL=$(heroku apps:info -s  | grep web-url | cut -d= -f2)`

$ heroku config:add HUBOT_HEROKU_WAKEUP_TIME=3:00

$ heroku config:add HUBOT_HEROKU_SLEEP_TIME=19:00

$ heroku addons:create scheduler:standard

$ heroku config:add TZ=&#39;Asia/Tokyo&#39;

$ git init

$ git commit -m &amp;quot;Initial commit&amp;quot;

$ git add .

$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、Slackにて当該ボットを設定しますが、ここでは、&lt;code&gt;#general&lt;/code&gt;などのチャンネルを追加しておくと良いです。&lt;code&gt;@hubot ping&lt;/code&gt;とすると、返事を返します。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>